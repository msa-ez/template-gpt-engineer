Please implement for this Event Storming Model:

{{{contexts.json}}}


I want to utilize following techniques:

- clean architecture
- spring-boot3
- spring-data-rest
- JPA (must use package jakarta.persistence.* instead of javax.persistence.*)
- H2 DB
- Lombok
- Kafka with spring-cloud-streams library 
- JUnit Test


SELF-CRITICISM: 
 - when you create pom.xml, USE correct parent project to spring boot 3
 - when you create pom.xml, you MUST specify the version: 3.1.3 ONLY for the spring-cloud-streams
 - Please generate start from pom.xml


when you create execution shell (run.sh), please add '--no-transfer-progress' option not to output transfer progress if there's mvn command:

```
mvn [command] --no-transfer-progress
```


<function>

var cache = []
const includingKeys = ["", "_type", "fieldDescriptors", "className", "displayName", "events", "aggregateRoot", "aggregates", "policies", "commands", "actors", "name", "examples", "given", "when", "then", "value", "type"]
const cycleAvoid = (key, value) => {
    if (isNaN(key) && !includingKeys.includes(key)) return undefined;

    // shorten the type name
    if (key === "_type" && typeof value === 'string' && value.indexOf('.') > 1) {
        value = value.split(".").pop();
    }

    if (typeof value === 'object' && value !== null) {
        if (Array.isArray(value)) {
            return value.map(item => cycleAvoid('', item));
        } else {
            const newObj = {};
            for (let i in value) {
                if (Object.prototype.hasOwnProperty.call(value, i)) {
                    if (i === 'value' && ['given', 'when', 'then'].includes(key)) {
                        // Log the value object
                        console.log(`Value object for ${key}:`, value[i]);
                        newObj[i] = value[i];
                    } else {
                        const subValue = cycleAvoid(i, value[i]);
                        if (subValue !== undefined) {
                            newObj[i] = subValue;
                        }
                    }
                }
            }
            return newObj;
        }
    }
    return value;
};

this.contexts.json = JSON.stringify(this, cycleAvoid);

</function>
