Please implement for this Event Storming Model:

{{{contexts.json}}}


I want to utilize following techniques:

- clean architecture
- spring-boot3
- spring-data-rest
- JPA (must use package jakarta.persistence.* instead of javax.persistence.*)
- H2 DB
- Lombok
- Kafka with spring-cloud-streams library 
- JUnit Test


SELF-CRITICISM: 
 - when you create pom.xml, USE correct parent project to spring boot 3
 - when you create pom.xml, you MUST specify the version: 3.1.3 ONLY for the spring-cloud-streams
 - Please generate start from pom.xml


when you create execution shell (run.sh), please add '--no-transfer-progress' option not to output transfer progress if there's mvn command:

```
mvn [command] --no-transfer-progress
```


<function>

var cache = []
const includingKeys = ["", "_type", "fieldDescriptors", "className", "displayName", "events", "aggregateRoot", "aggregates", "policies", "commands", "actors", "name", "examples", "given", "when", "then", "value", "type"]

function deepCopy(obj, hash = new WeakMap()) {
    if (Object(obj) !== obj) return obj; // primitives
    if (hash.has(obj)) return hash.get(obj); // cyclic reference
    let result;
    if (obj instanceof Set) {
        result = new Set();
        hash.set(obj, result);
        obj.forEach(value => { result.add(deepCopy(value, hash)); });
    } else if (obj instanceof Map) {
        result = new Map();
        hash.set(obj, result);
        obj.forEach((value, key) => { result.set(deepCopy(key, hash), deepCopy(value, hash)); });
    } else if (Array.isArray(obj)) {
        result = [];
        hash.set(obj, result);
        obj.forEach((value, index) => { result[index] = deepCopy(value, hash); });
    } else if (obj instanceof Object) {
        result = {};
        hash.set(obj, result);
        Object.keys(obj).forEach(key => { result[key] = deepCopy(obj[key], hash); });
    } else {
        throw new Error("Unable to copy obj! Its type isn't supported.");
    }
    return result;
}

const cycleAvoid = (key, value) => {
    if (isNaN(key) && !includingKeys.includes(key)) return undefined;

    // shorten the type name
    if (key === "_type" && typeof value === 'string' && value.indexOf('.') > 1) {
        value = value.split(".").pop();
    }

    if (typeof value === 'object' && value !== null) {
        if (Array.isArray(value)) {
            return value.map(item => cycleAvoid(key, item));
        } else {
            const newObj = {};
            for (let i in value) {
                if (Object.prototype.hasOwnProperty.call(value, i)) {
                    if (i === 'value' && (key === 'given' || key === 'when' || key === 'then')) {
                        // 'value' 속성을 그대로 유지
                        newObj[i] = deepCopy(value[i]);
                    } else if (['given', 'when', 'then'].includes(i)) {
                        newObj[i] = value[i].map(item => cycleAvoid(i, item));
                    } else {
                        const subValue = cycleAvoid(i, value[i]);
                        if (subValue !== undefined) {
                            newObj[i] = subValue;
                        }
                    }
                }
            }
            return newObj;
        }
    }
    return value;
};

// 원본 데이터의 깊은 복사본 생성
const deepCopiedData = deepCopy(this);

// 복사본에 대해 cycleAvoid 함수 적용
this.contexts.json = JSON.stringify(deepCopiedData, cycleAvoid);

</function>
